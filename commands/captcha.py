import discord
from discord.ext import commands
from discord import app_commands
import json
import os
import random
import string
import asyncio
from datetime import datetime, timedelta

def load_captcha_config():
    if os.path.exists("captcha_config.json"):
        with open("captcha_config.json", "r") as file:
            data = json.load(file)
            default_config = {
                "enabled": False,
                "verification_channel_id": 0,
                "verification_role_id": 0,
                "unverified_role_id": 0,
                "timeout_minutes": 5,
                "kick_on_fail": True,
                "max_attempts": 3
            }
            return {**default_config, **data}
    return {
        "enabled": False,
        "verification_channel_id": 0,
        "verification_role_id": 0,
        "unverified_role_id": 0,
        "timeout_minutes": 5,
        "kick_on_fail": True,
        "max_attempts": 3
    }

def save_captcha_config(config):
    with open("captcha_config.json", "w") as file:
        json.dump(config, file)

def load_pending_verifications():
    if os.path.exists("pending_verifications.json"):
        with open("pending_verifications.json", "r") as file:
            return json.load(file)
    return {}

def save_pending_verifications(data):
    with open("pending_verifications.json", "w") as file:
        json.dump(data, file)

def generate_captcha():
    """G√©n√®re un captcha simple avec des lettres et chiffres"""
    characters = string.ascii_uppercase + string.digits
    # √âviter les caract√®res confus comme 0, O, 1, I
    characters = characters.replace('0', '').replace('O', '').replace('1', '').replace('I', '')
    return ''.join(random.choices(characters, k=5))

def create_captcha_embed(captcha_code, attempts_left, timeout_minutes):
    """Cr√©e l'embed pour le captcha"""
    embed = discord.Embed(
        title="üîí V√©rification Captcha",
        description=f"Bienvenue ! Pour acc√©der au serveur, veuillez taper le code suivant :",
        color=discord.Color.blue()
    )
    embed.add_field(
        name="üìã Code √† taper:",
        value=f"```{captcha_code}```",
        inline=False
    )
    embed.add_field(
        name="‚è∞ Temps restant:",
        value=f"{timeout_minutes} minutes",
        inline=True
    )
    embed.add_field(
        name="üîÑ Tentatives restantes:",
        value=f"{attempts_left}",
        inline=True
    )
    embed.add_field(
        name="‚ÑπÔ∏è Instructions:",
        value="Tapez exactement le code affich√© ci-dessus (sensible √† la casse)",
        inline=False
    )
    embed.set_footer(text="‚ö†Ô∏è Attention : Vous serez expuls√© si vous √©chouez ou si le temps expire")
    return embed

class Captcha(commands.Cog):
    def __init__(self, client):
        self.client = client

    @app_commands.command(name="setup_captcha", description="Configurer le syst√®me de captcha")
    @app_commands.default_permissions(administrator=True)
    async def setup_captcha(self, inter: discord.Interaction):
        # R√©pondre imm√©diatement pour √©viter le timeout
        await inter.response.send_message("üîÑ Configuration du captcha en cours...", ephemeral=True)

        guild = inter.guild
        config = load_captcha_config()

        try:
            # Cr√©er le r√¥le "Non V√©rifi√©" si il n'existe pas
            unverified_role = discord.utils.get(guild.roles, id=config["unverified_role_id"])
            if not unverified_role:
                unverified_role = await guild.create_role(
                    name="Non V√©rifi√©",
                    color=discord.Color.red(),
                    reason="R√¥le pour les membres non v√©rifi√©s"
                )
                config["unverified_role_id"] = unverified_role.id


            # Cr√©er le r√¥le "V√©rifi√©" si il n'existe pas
            verified_role = discord.utils.get(guild.roles, id=config["verification_role_id"])
            if not verified_role:
                verified_role = await guild.create_role(
                    name="V√©rifi√©",
                    color=discord.Color.green(),
                    reason="R√¥le pour les membres v√©rifi√©s"
                )
                config["verification_role_id"] = verified_role.id

            # Cr√©er le canal de v√©rification si il n'existe pas
            verification_channel = discord.utils.get(guild.text_channels, id=config["verification_channel_id"])
            if not verification_channel:
                # Cr√©er une cat√©gorie pour la v√©rification
                verification_category = await guild.create_category("üîí V√©rification")

                verification_channel = await guild.create_text_channel(
                    "verification",
                    category=verification_category,
                    reason="Canal de v√©rification captcha"
                )
                config["verification_channel_id"] = verification_channel.id

            # Toujours reconfigurer les permissions du canal de v√©rification (m√™me s'il existe d√©j√†)
            await verification_channel.set_permissions(guild.default_role, read_messages=False, send_messages=False)
            await verification_channel.set_permissions(unverified_role, read_messages=True, send_messages=True, view_channel=True)
            await verification_channel.set_permissions(verified_role, read_messages=False, view_channel=False)

            # S'assurer que le bot peut toujours acc√©der au canal
            await verification_channel.set_permissions(guild.me, read_messages=True, send_messages=True, manage_messages=True, view_channel=True)

            # Maintenant supprimer les permissions de voir les AUTRES canaux pour le r√¥le non v√©rifi√©
            if unverified_role:
                for channel in guild.channels:
                    if isinstance(channel, (discord.TextChannel, discord.VoiceChannel)):
                        try:
                            # Ne pas bloquer l'acc√®s au canal de v√©rification et sa cat√©gorie
                            if channel.id != verification_channel.id and channel.id != verification_channel.category.id:
                                await channel.set_permissions(unverified_role, read_messages=False, connect=False)
                        except discord.Forbidden:
                            continue  # Ignorer si pas de permissions

            save_captcha_config(config)

            # Mettre √† jour la r√©ponse avec les r√©sultats
            embed = discord.Embed(
                title="‚úÖ Configuration du Captcha termin√©e",
                description="Le syst√®me de captcha a √©t√© configur√© avec succ√®s !",
                color=discord.Color.green()
            )
            embed.add_field(name="Canal de v√©rification", value=verification_channel.mention, inline=False)
            embed.add_field(name="R√¥le v√©rifi√©", value=verified_role.mention, inline=True)
            embed.add_field(name="R√¥le non v√©rifi√©", value=unverified_role.mention, inline=True)
            embed.add_field(name="Statut", value="‚ùå D√©sactiv√©" if not config["enabled"] else "‚úÖ Activ√©", inline=False)

            await inter.edit_original_response(content=None, embed=embed)

        except Exception as e:
            error_embed = discord.Embed(
                title="‚ùå Erreur de configuration",
                description=f"Une erreur s'est produite : {str(e)}",
                color=discord.Color.red()
            )
            await inter.edit_original_response(content=None, embed=error_embed)

    @app_commands.command(name="toggle_captcha", description="Activer ou d√©sactiver le syst√®me de captcha")
    @app_commands.default_permissions(administrator=True)
    async def toggle_captcha(self, inter: discord.Interaction):
        config = load_captcha_config()
        config["enabled"] = not config["enabled"]
        save_captcha_config(config)

        status = "‚úÖ activ√©" if config["enabled"] else "‚ùå d√©sactiv√©"
        embed = discord.Embed(
            title="üîÑ Captcha mis √† jour",
            description=f"Le syst√®me de captcha est maintenant {status}",
            color=discord.Color.green() if config["enabled"] else discord.Color.red()
        )
        await inter.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="captcha_config", description="Configurer les param√®tres du captcha")
    @app_commands.default_permissions(administrator=True)
    async def captcha_config(self, inter: discord.Interaction,
                           timeout_minutes: int = 5,
                           max_attempts: int = 3,
                           kick_on_fail: bool = True):
        config = load_captcha_config()
        config["timeout_minutes"] = max(1, min(timeout_minutes, 30))  # Entre 1 et 30 minutes
        config["max_attempts"] = max(1, min(max_attempts, 10))  # Entre 1 et 10 tentatives
        config["kick_on_fail"] = kick_on_fail
        save_captcha_config(config)

        embed = discord.Embed(
            title="‚öôÔ∏è Configuration du Captcha mise √† jour",
            color=discord.Color.blue()
        )
        embed.add_field(name="‚è∞ Temps limite", value=f"{config['timeout_minutes']} minutes", inline=True)
        embed.add_field(name="üîÑ Tentatives max", value=f"{config['max_attempts']}", inline=True)
        embed.add_field(name="üë¢ Kick en cas d'√©chec", value="‚úÖ Oui" if config['kick_on_fail'] else "‚ùå Non", inline=True)

        await inter.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="verify_user", description="Forcer la v√©rification d'un utilisateur")
    @app_commands.default_permissions(administrator=True)
    async def verify_user(self, inter: discord.Interaction, member: discord.Member):
        config = load_captcha_config()

        if config["verification_role_id"] == 0:
            await inter.response.send_message("‚ùå Le syst√®me de captcha n'est pas configur√©. Utilisez `/setup_captcha` d'abord.", ephemeral=True)
            return

        verified_role = discord.utils.get(inter.guild.roles, id=config["verification_role_id"])
        unverified_role = discord.utils.get(inter.guild.roles, id=config["unverified_role_id"])

        if verified_role:
            await member.add_roles(verified_role, reason="V√©rification manuelle par un administrateur")
        if unverified_role and unverified_role in member.roles:
            await member.remove_roles(unverified_role, reason="V√©rification manuelle par un administrateur")

        # Supprimer de la liste des v√©rifications en attente
        pending = load_pending_verifications()
        if str(member.id) in pending:
            del pending[str(member.id)]
            save_pending_verifications(pending)

        embed = discord.Embed(
            title="‚úÖ Utilisateur v√©rifi√©",
            description=f"{member.mention} a √©t√© v√©rifi√© manuellement.",
            color=discord.Color.green()
        )
        await inter.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="captcha_status", description="Afficher le statut du syst√®me de captcha")
    @app_commands.default_permissions(administrator=True)
    async def captcha_status(self, inter: discord.Interaction):
        config = load_captcha_config()
        guild = inter.guild

        # Obtenir les informations sur les r√¥les et canaux
        verified_role = discord.utils.get(guild.roles, id=config["verification_role_id"])
        unverified_role = discord.utils.get(guild.roles, id=config["unverified_role_id"])
        verification_channel = guild.get_channel(config["verification_channel_id"])

        # Compter les membres en attente
        pending = load_pending_verifications()
        pending_count = len([p for p in pending.values() if p.get("guild_id") == guild.id])

        # Cr√©er l'embed de statut
        embed = discord.Embed(
            title="üîí Statut du Syst√®me Captcha",
            color=discord.Color.blue() if config["enabled"] else discord.Color.greyple()
        )

        # Statut g√©n√©ral
        status_value = "‚úÖ Activ√©" if config["enabled"] else "‚ùå D√©sactiv√©"
        embed.add_field(name="üìä Statut", value=status_value, inline=True)
        embed.add_field(name="üë• En attente", value=f"{pending_count} membre(s)", inline=True)
        embed.add_field(name="‚è∞ Timeout", value=f"{config['timeout_minutes']} min", inline=True)

        # Configuration
        embed.add_field(name="üîÑ Tentatives max", value=f"{config['max_attempts']}", inline=True)
        embed.add_field(name="üë¢ Kick si √©chec", value="‚úÖ Oui" if config['kick_on_fail'] else "‚ùå Non", inline=True)
        embed.add_field(name="üÜî Guild ID", value=f"{guild.id}", inline=True)

        # R√¥les et canaux
        verification_text = verification_channel.mention if verification_channel else "‚ùå Non configur√©"
        verified_text = verified_role.mention if verified_role else "‚ùå Non configur√©"
        unverified_text = unverified_role.mention if unverified_role else "‚ùå Non configur√©"

        embed.add_field(name="üìù Canal v√©rification", value=verification_text, inline=False)
        embed.add_field(name="‚úÖ R√¥le v√©rifi√©", value=verified_text, inline=True)
        embed.add_field(name="‚ùå R√¥le non v√©rifi√©", value=unverified_text, inline=True)

        # Statistiques des membres
        if verified_role:
            verified_members = len(verified_role.members)
            embed.add_field(name="üë§ Membres v√©rifi√©s", value=f"{verified_members}", inline=True)

        if unverified_role:
            unverified_members = len(unverified_role.members)
            embed.add_field(name="‚ùì Membres non v√©rifi√©s", value=f"{unverified_members}", inline=True)

        await inter.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="clear_pending", description="Effacer toutes les v√©rifications en attente")
    @app_commands.default_permissions(administrator=True)
    async def clear_pending(self, inter: discord.Interaction):
        pending = load_pending_verifications()
        guild_pending = {k: v for k, v in pending.items() if v.get("guild_id") == inter.guild.id}

        # Supprimer les v√©rifications pour ce serveur
        for user_id in guild_pending.keys():
            if user_id in pending:
                del pending[user_id]

        save_pending_verifications(pending)

        embed = discord.Embed(
            title="üßπ V√©rifications effac√©es",
            description=f"{len(guild_pending)} v√©rification(s) en attente ont √©t√© supprim√©es.",
            color=discord.Color.orange()
        )
        await inter.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="send_welcome_message", description="Envoyer un message d'accueil dans le salon de v√©rification")
    @app_commands.default_permissions(administrator=True)
    async def send_welcome_message(self, inter: discord.Interaction):
        config = load_captcha_config()

        if config["verification_channel_id"] == 0:
            await inter.response.send_message("‚ùå Le syst√®me de captcha n'est pas configur√©. Utilisez `/setup_captcha` d'abord.", ephemeral=True)
            return

        verification_channel = inter.guild.get_channel(config["verification_channel_id"])
        if not verification_channel:
            await inter.response.send_message("‚ùå Canal de v√©rification non trouv√©.", ephemeral=True)
            return

        # Message d'accueil permanent
        welcome_embed = discord.Embed(
            title="üîí Bienvenue sur le serveur !",
            description="**Pour acc√©der au serveur, vous devez passer la v√©rification captcha.**",
            color=discord.Color.blue()
        )
        welcome_embed.add_field(
            name="üìã Instructions:",
            value="‚Ä¢ Quand vous rejoignez le serveur, un captcha sera automatiquement g√©n√©r√©\n‚Ä¢ Tapez exactement le code affich√© (sensible √† la casse)\n‚Ä¢ Vous avez plusieurs tentatives et un temps limit√©",
            inline=False
        )
        welcome_embed.add_field(
            name="‚ö†Ô∏è Important:",
            value="‚Ä¢ Ne partagez pas vos codes\n‚Ä¢ En cas de probl√®me, contactez un mod√©rateur\n‚Ä¢ Les messages sont automatiquement supprim√©s pour garder le canal propre",
            inline=False
        )
        welcome_embed.add_field(
            name="üéØ Objectif:",
            value="Cette v√©rification permet de prot√©ger notre communaut√© contre les bots et les utilisateurs malveillants.",
            inline=False
        )
        welcome_embed.set_footer(text="Merci de votre compr√©hension et bienvenue ! üéâ")

        try:
            await verification_channel.send(embed=welcome_embed)
            await inter.response.send_message("‚úÖ Message d'accueil envoy√© dans le salon de v√©rification.", ephemeral=True)
        except discord.Forbidden:
            await inter.response.send_message("‚ùå Impossible d'envoyer le message. V√©rifiez les permissions du bot.", ephemeral=True)

    @app_commands.command(name="test_captcha", description="Tester le syst√®me de captcha en simulant un nouveau membre")
    @app_commands.default_permissions(administrator=True)
    async def test_captcha(self, inter: discord.Interaction, member: discord.Member):
        config = load_captcha_config()

        if not config["enabled"]:
            await inter.response.send_message("‚ùå Le syst√®me de captcha est d√©sactiv√©. Utilisez `/toggle_captcha` pour l'activer.", ephemeral=True)
            return

        guild = inter.guild
        unverified_role = discord.utils.get(guild.roles, id=config["unverified_role_id"])
        verification_channel = guild.get_channel(config["verification_channel_id"])

        if not unverified_role or not verification_channel:
            await inter.response.send_message("‚ùå Le syst√®me de captcha n'est pas correctement configur√©. Utilisez `/setup_captcha`.", ephemeral=True)
            return

        # Simuler l'√©v√©nement on_member_join
        try:
            await member.add_roles(unverified_role, reason="Test captcha - simulation nouveau membre")

            # G√©n√©rer un captcha de test
            captcha_code = generate_captcha()

            # Cr√©er l'embed de test
            embed = create_captcha_embed(captcha_code, config["max_attempts"], config["timeout_minutes"])

            # Envoyer dans le canal de v√©rification
            await verification_channel.send(f"üß™ **TEST CAPTCHA** pour {member.mention}", embed=embed)

            await inter.response.send_message(f"‚úÖ Test captcha lanc√© pour {member.mention}. Code: `{captcha_code}`", ephemeral=True)

        except discord.Forbidden:
            await inter.response.send_message("‚ùå Permissions insuffisantes pour effectuer le test.", ephemeral=True)

async def setup(client):
    await client.add_cog(Captcha(client))